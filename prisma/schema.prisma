generator client {
  provider        = "prisma-client-js"
  //output          = "generated/client"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String       @id @unique @default(cuid())
  createdAt   DateTime     @default(now()) @map("created_at")
  name        String       @db.VarChar(150)
  description String?      @db.Text
  userId      String       @map("user_id")
  statuses    Status[]
  taskFields  TaskFields[]

  @@map("project")
}

model Status {
  id        String  @id @unique @default(cuid())
  name      String  @db.VarChar(50)
  order     Int?    @default(1)
  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@map("status")
}

model Task {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  name        String   @db.VarChar(150)
  description String?  @db.Text
  order       Int?     @default(1)

  statusId String @map("status_id")
  status   Status @relation(fields: [statusId], references: [id], onDelete: Cascade)

  taskIntValues  TaskIntValues[]
  taskStrValues  TaskStrValues[]
  taskEnumValues TaskEnumValues[]

  @@map("task")
}

model TaskFields {
  id    String    @id @unique @default(cuid())
  name  String    @db.VarChar(150)
  field TypeField

  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  taskFieldsEnumValue TaskFieldsEnumValue[]
  taskIntValues       TaskIntValues[]
  taskStrValues       TaskStrValues[]
  TaskEnumValues      TaskEnumValues[]

  @@map("task_fields")
}

model TaskFieldsEnumValue {
  id          String     @id @unique @default(cuid())
  name        String
  taskFieldId String
  taskField   TaskFields @relation(fields: [taskFieldId], references: [id], onDelete: Cascade)
}

model TaskEnumValues {
  value       String     @db.VarChar(150)
  taskFieldId String
  taskId      String
  taskField   TaskFields @relation(fields: [taskFieldId], references: [id], onDelete: Cascade)
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id(name: "task_enum_value_id", [taskFieldId, taskId])
}

model TaskIntValues {
  value Int

  taskFieldId String
  taskId      String
  taskField   TaskFields @relation(fields: [taskFieldId], references: [id], onDelete: Cascade)
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id(name: "task_int_value_id", [taskFieldId, taskId])
}

model TaskStrValues {
  value String @db.VarChar(150)

  taskFieldId String
  taskId      String
  taskFields  TaskFields @relation(fields: [taskFieldId], references: [id], onDelete: Cascade)
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id(name: "task_str_value_id", [taskFieldId, taskId])
}

enum TypeField {
  string
  integer
  enum
}
